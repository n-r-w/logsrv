// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: proto/logsrv.proto

package grpc_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogsrvClient is the client API for Logsrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsrvClient interface {
	SendLog(ctx context.Context, in *SendOptions, opts ...grpc.CallOption) (*Error, error)
	SearchLog(ctx context.Context, in *SearchOptions, opts ...grpc.CallOption) (*SearchLogReply, error)
}

type logsrvClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsrvClient(cc grpc.ClientConnInterface) LogsrvClient {
	return &logsrvClient{cc}
}

func (c *logsrvClient) SendLog(ctx context.Context, in *SendOptions, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/grpc_gen.Logsrv/SendLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsrvClient) SearchLog(ctx context.Context, in *SearchOptions, opts ...grpc.CallOption) (*SearchLogReply, error) {
	out := new(SearchLogReply)
	err := c.cc.Invoke(ctx, "/grpc_gen.Logsrv/SearchLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsrvServer is the server API for Logsrv service.
// All implementations must embed UnimplementedLogsrvServer
// for forward compatibility
type LogsrvServer interface {
	SendLog(context.Context, *SendOptions) (*Error, error)
	SearchLog(context.Context, *SearchOptions) (*SearchLogReply, error)
	mustEmbedUnimplementedLogsrvServer()
}

// UnimplementedLogsrvServer must be embedded to have forward compatible implementations.
type UnimplementedLogsrvServer struct {
}

func (UnimplementedLogsrvServer) SendLog(context.Context, *SendOptions) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLog not implemented")
}
func (UnimplementedLogsrvServer) SearchLog(context.Context, *SearchOptions) (*SearchLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLog not implemented")
}
func (UnimplementedLogsrvServer) mustEmbedUnimplementedLogsrvServer() {}

// UnsafeLogsrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsrvServer will
// result in compilation errors.
type UnsafeLogsrvServer interface {
	mustEmbedUnimplementedLogsrvServer()
}

func RegisterLogsrvServer(s grpc.ServiceRegistrar, srv LogsrvServer) {
	s.RegisterService(&Logsrv_ServiceDesc, srv)
}

func _Logsrv_SendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsrvServer).SendLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_gen.Logsrv/SendLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsrvServer).SendLog(ctx, req.(*SendOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logsrv_SearchLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsrvServer).SearchLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_gen.Logsrv/SearchLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsrvServer).SearchLog(ctx, req.(*SearchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// Logsrv_ServiceDesc is the grpc.ServiceDesc for Logsrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logsrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_gen.Logsrv",
	HandlerType: (*LogsrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendLog",
			Handler:    _Logsrv_SendLog_Handler,
		},
		{
			MethodName: "SearchLog",
			Handler:    _Logsrv_SearchLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logsrv.proto",
}
