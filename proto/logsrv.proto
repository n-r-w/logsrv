syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/n-r-w/logsrv/internal/presenter/grpc/grpc_gen";

package grpc_gen;

service Logsrv {
    rpc SendLog(SendOptions) returns (google.protobuf.Empty) {}
    rpc SearchLog(SearchOptions) returns (SearchLogReply) {}
}


// Параметры отправки логов
message SendOptions {
    string token = 1;
    repeated LogRecord records = 2;
}

// Запись в журнале логов
message LogRecord {
    google.protobuf.Timestamp rec_time = 1;
    google.protobuf.Timestamp log_time = 2;
    string service = 3;
    string source = 4;
    string category = 5;
    string level = 6;
    string session = 7;
    string info = 8;
    string url = 9;
    string http_type = 10;
    int32 http_code = 11;
    int32 error_code = 12;
    map<string, string> http_headers = 13;
    map<string, string> properties = 14;
    bytes body = 15;
}

// Параметры поиска
message SearchOptions {
    string token = 1;
    bool and = 2;
    repeated SearchCriteria criteria = 3;
}

// Один из критериев поиска
message SearchCriteria {
    bool and = 1;
    google.protobuf.Timestamp from = 2;
    google.protobuf.Timestamp to = 3;
    string service = 4;
    string source = 5;
    string category = 6;
    string level = 7;
    string session = 8;
    string info = 9;
    string url = 10;
    string http_type = 11;
    int32 http_code = 12;
    int32 error_code = 13;
    map<string, string> http_headers = 14;
    map<string, string> properties = 15;
    map<string, bytes> body_values = 16;
    bytes body = 17;
}

// Результат поиска
message SearchLogReply {    
    repeated LogRecord records = 2;
}